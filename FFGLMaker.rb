#!/usr/bin/env ruby

# initialize
require "thor"
require "erb"
require "pry"
require "ostruct"
require "Open3"

PROCESS_PATH       = "./"
SRC_DIR            = "src"
BUILD_DIR          = "build"
SRC_SMT_DIR        = "#{SRC_DIR}/ShaderMaker-template"
BUILD_SRC_DIR      = "#{BUILD_DIR}/src" 
BUILD_RELEASE_DIR  = "#{BUILD_DIR}/release"
BUILD_MAKEFILE_DIR = "build/osx"
BUILD_BINARIES_DIR = "Binaries/osx/ShaderMaker.bundle"

TEMPLATE_FILES     = ["#{SRC_SMT_DIR}/build/osx/info.plist.erb", "#{SRC_SMT_DIR}/ShaderMaker.cpp.erb"]

class FFGLMaker < Thor
  default_task :create

  desc "Create", "Create the FFGL Plugin from a Shaper Source file"
  long_desc <<-LONGDESC
    Generate and compile a given shader file (sourced from GLSL Sandbox or ShaderToy) to an FFGL Plugin.
    The bundled plugin will be generated under the #{BUILD_RELEASE_DIR} folder.
  LONGDESC
  
  option :shader,      aliases: "-i", desc: "Shader input text file path", required: true
  option :name,        aliases: "-n", desc: "Desired name of the FFGL Plugin", required: true
  option :source_plug, aliases: "-s", desc: "Generate a 'source' FFGL plugin rather then an 'effect'", type: :boolean

  def create
    safe_name = @options[:name].dup.gsub(/[^0-9A-Za-z.\-]/, '_')
    build_name = "src_" + Time.new.strftime("%Y%m%d-%H%M") + "_#{safe_name}"
    build_path = PROCESS_PATH + BUILD_SRC_DIR + "/" + build_name

    # make sure folders exists
    FileUtils.mkdir_p PROCESS_PATH + BUILD_DIR
    FileUtils.mkdir_p PROCESS_PATH + BUILD_SRC_DIR
    FileUtils.mkdir_p PROCESS_PATH + BUILD_RELEASE_DIR

    # generate the source
    FileUtils.cp_r SRC_SMT_DIR, build_path

    # generate the template
    data = OpenStruct.new(
      identifier: "com.gariany." + safe_name,
      plugin_id: ('A'..'Z').to_a.shuffle[0,4].join,
      plugin_name: @options[:name],
      plugin_type: @options[:source_plug] ? "FF_SOURCE" : "FF_EFFECT",
      description: "Generated by FFGLMaker. Visit github.com/eladg/FFGLMaker for more info.",
      about: "Generated by FFGLMaker. Visit github.com/eladg/FFGLMaker for more info.",
      shader_src: File.read(options[:shader]) # assumes file exist, readable and has content
    )

    TEMPLATE_FILES.each do |f|
      untemplated_file_path = f.gsub(SRC_SMT_DIR, build_path).gsub(".erb","")
      result = ERB.new(File.read(f)).result(data.instance_eval { binding })
      File.open(untemplated_file_path, 'w') { |file| file.write(result) }
    end

    # compile source
    Open3.popen3("cd #{build_path}/#{BUILD_MAKEFILE_DIR} && make all") do |stdin, stdout, stderr, thread|
      # TODO:
      # didn't decide what to do with compilation io
      # should learn how homebrew are doing it correctly
      puts ""
      puts "------------------------------------"
      puts "  Compilation Text Start"
      puts "------------------------------------"
      puts ""
      puts stdout.read
      puts stderr.read      
    end

    # bundle
    FileUtils.cp_r "#{build_path}/#{BUILD_BINARIES_DIR}", "#{BUILD_RELEASE_DIR}/#{safe_name}.bundle"
    FileUtils.mv "#{BUILD_RELEASE_DIR}/#{safe_name}.bundle/Contents/MacOS/ShaderMaker", "#{BUILD_RELEASE_DIR}/#{safe_name}.bundle/Contents/MacOS/#{safe_name}"

    puts ""
    puts "------------------------------------"
    puts "  Compilation Text End"
    puts "------------------------------------"
    puts ""

    puts "Plugin Created on: #{BUILD_RELEASE_DIR}/#{safe_name}.bundle"
    puts "\nDone."
  end

  desc "Clean", "Clean source plugin folder"
  long_desc <<-LONGDESC
    The build/src folder can get messy with multiple generated sources. Use this command to clean all sources.
  LONGDESC
  
  def clean
    puts "removing content of folder #{BUILD_DIR}."
    FileUtils.rm_rf BUILD_DIR
  end
end



FFGLMaker.start(ARGV)